import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
	const post = await prisma.post.upsert({
		where: { title: '' },
		update: {},
		create: {
			title: 'Upgrade Your Existing Projects To Next Js 13',
			slug: 'upgrade-your-existing-projects-to-next-js-13',
			content:
				'<p>Vercel recently announced Next Js 13 (stable) at Next Js Conf, and it comes with some great and useful features which made Next Js even faster and more efficient in Development and Production.</p><p>Overall developer experience has been very smooth with the addition of new features like</p><ul><li>app Directory (beta)</li><li>TurboPack ( alpha )</li><li>New next/image</li><li>Improved next/link</li><li>New @next/fonts ( beta )</li></ul><p>Well, discuss each new feature in a separate post meanwhile let me introduce them in brief.</p><p>You can read about them on<a href="https://nextjs.org/blog/next-13">Next Js official blog</a></p><h4><a name="app-directory-beta-" href="#app-directory-beta-"></a>app Directory ( beta )</h4><p>Next Js added a new file structure, now instead of using the pages directory as our main directory, we can also use the app directory which comes with new features and a routing system.</p><p>In regular pages structure, we used to organize our projects like the one below.<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>ProjectName-pages üìÅblog index.js [slug].js _app.js index.js-public-src-styles-package.json</code></pre></div><p>Now we can use app directory for our main pages like below<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>ProjectName-app üìÅblog page.js [slug].js layout.js layout.js page.js-public-src-styles-package.json</code></pre></div><p>the new app directory requires page.js instead of index.js, the app directory, and each subdirectory should contain a page.js, and we may create layout.js for layouts, error for errors when components fail to load in each directory but are optional.</p><p>This is a new feature and is still in the beta version, so it is not recommended to use in production yet.</p><h4><a name="turbopack-alpha-" href="#turbopack-alpha-"></a>TurboPack ( alpha )</h4><p>Next Js is replacing Webpack with the Rust-based bundling and build toolTurboPack for better and faster build and reload. It is still in the alpha version.</p><h4><a name="nextfonts" href="#nextfonts"></a>@next/fonts</h4><p>Next Js 13 introduces a new fonts library which will automatically host all the necessary fonts locally inside the project so we don‚Äôt have to import from remote CDN while staying in our project which prevents layout shifts when page load delays.</p><h4><a name="new-nextlink" href="#new-nextlink"></a>New next/link</h4><p>Now we don have to use an extra<code>&lt;a&gt;</code>tag inside<code>&lt;Link&gt;</code>components as new next/link will automatically add an<code>&lt;a&gt;</code>inside to the page which is absolutely awesome.</p><h4><a name="new-nextimage" href="#new-nextimage"></a>New next/image</h4><p>With improved next/image, now we don‚Äôt have to give the height and width for local images, Next Js will automatically set width and height according to the width and height of the image,</p><p>Note: this only works for local images if you‚Äôre importing images from the remote server you still have to provide width and height in numeric value.</p><p>New next/image comes with the native lazy loading support which boosts the performance and load time.</p><h2><a name="upgrading-existing-projects-to-next-js-13" href="#upgrading-existing-projects-to-next-js-13"></a>Upgrading existing projects to Next Js 13</h2><p>We can incrementally upgrade our existing Next Js 12 or any older Next Js project to Next Js 13, which means we can still use new features of Next Js 13 in our project which are ready for the production environment.</p><p>Which are</p><ul><li>next/image</li><li>next/link</li></ul><p>So in this guide, we‚Äôll see how can we upgrade to Next Js 13 and update our old code base easy to use new components with the help of codemod.</p><p>To update your Next js project to Next Js 13 use one of the following commands according to your environment<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>npm i next@latest react@latest react-dom@latest eslint-config-next@latest# oryarn add next@latest react@latest react-dom@latest eslint-config-next@latest# orpnpm up next react react-dom eslint-config-next --latestafter running the above command check your package.json for the latest Next Js version</code></pre></div><p>Now we‚Äôll use codemod to incrementally update our codebase for new components and add legacy support if we wish to use older libraries along with the new ones.</p><h4><a name="nextcodemod" href="#nextcodemod"></a>@next/codemod</h4><p>Next.js provides Codemod transformations to help upgrade your Next.js codebase when a feature is deprecated.</p><p>Codemods are transformations that run on your codebase programmatically. This allows for a large number of changes to be applied without having to manually go through every file.</p><p>Read more about<a href="https://nextjs.org/docs/advanced-features/codemods">codemod</a>on the official documentation.</p><p>Install codemod in your project if you haven‚Äôt already by using the following command</p><p><code>npm install @next/codemod@latest</code></p><h4><a name="nextlink" href="#nextlink"></a>next/link</h4><p>components earlier needed and<code>&lt;a&gt;</code>tag as a child to work properly but in Next Js 13 it is no more necessary as next js automatically added a<code>&lt;a&gt;</code>tag in our page so we don‚Äôt need to pass<code>&lt;a&gt;</code>tag as a child in components anymore.</p><p>Below is the comparison between the old and new link component<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>import Link from \'next/link\'// Next.js 12: `&lt;a&gt;` has to be nested otherwise it\'s excluded&lt;Link href="/about"&gt; &lt;a className="nav-links"&gt;Home&lt;/a&gt;&lt;/Link&gt;// Next.js 13: `&lt;Link&gt;` always renders `&lt;a&gt;` under the hood with all the props&lt;Link href="/about" className="nav-links"&gt; About&lt;/Link</code></pre></div><p>to update all your existing components to new style tag run the following codemod<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>npx @next/codemod new-link /pages// new-link is the codemod defined by next js team// ./pages is the path where codemod will be executednpx @next/codemod@latest &lt;transform&gt; &lt;path&gt; // use this syntax </code></pre></div><p>you can use<br><code>--dry</code>to do a dry run, no code will change.</p><p><code>--print</code>to see the changes that happened</p><p>Example<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>npx @next/codemod new-link /pages --dry //will show the pages eligible for changenpx @next/codemod new-link /pages //will change all old &lt;Link&gt; tag to new onenpx @next/codemod new-link /pages --print //will show what changes happened</code></pre></div><p>after running the new-link codemod all your old style components will update with the new style and all the attributes and props of<code>&lt;a&gt;</code>tag will be assigned to tag.<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>import Link from \'next/link\'//OLD&lt;Link href="/about"&gt; &lt;a className="nav-links"&gt;Home&lt;/a&gt;&lt;/Link&gt;//NEW &lt;Link href="/about" className="nav-links"&gt; About&lt;/Link</code></pre></div><h4><a name="nextimage" href="#nextimage"></a>next/image</h4><p>As soon as we updated our project to Next Js 13 the new next/image library was installed so now we have to follow the style of the new next/image and the old next/image is renamed to next/legacy/image so if we want to see the old image library we have to add support legacy library and we can do this in seconds with the help of codemod given below<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>//changes all next/image import to next/legacy/image in all files inside ./pages directory//if you want to do this in another directory the chage ./pages=&gt; newPathnamenpx @next/codemod@latest next-image-to-legacy-image ./pages </code></pre></div><p>after running above codemod</p><p>below code<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>import Image1 from \'next/image\';import Image2 from \'next/future/image\';export default function Home(){return ( &lt;div&gt; &lt;Image1 src="/test.jpg" width="200" height="300" /&gt; &lt;Image2 src="/test.png" width="500" height="400" /&gt; &lt;/div&gt; );}</code></pre></div><p>will change to<br></p><div class="highlight js-code-highlight"><pre class="highlight plaintext"><code>// \'next/image\' becomes \'next/legacy/image\'import Image1 from \'next/legacy/image\';// \'next/future/image\' becomes \'next/image\'import Image2 from \'next/image\';export default function Home(){return ( &lt;div&gt; &lt;Image1 src="/test.jpg" width="200" height="300" /&gt; &lt;Image2 src="/test.png" width="500" height="400" /&gt; &lt;/div&gt; );}</code></pre></div><p>now you can use old as well as new next/image and gain great performance while maintaining old style of your webpage.</p>',
			excerpt: `Vercel recently announced Next Js 13 (stable) at Next Js Conf...`,
			featured_image:
				'https://res.cloudinary.com/practicaldev/image/fetch/s--ucLFjvWf--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3u2lp0sorp9bixevp6y.png',
		},
	});
}
main()
	.then(() => prisma.$disconnect())
	.catch(async (e) => {
		console.error(e);
		await prisma.$disconnect();
		process.exit(1);
	});
